N11 Software Coding Style
=========================

This document contains information on the general coding guidelines for
N11 Software. Being honest, this coding style is our (mainly Levi's)
personal preference and we'll try not to force it down your throat, but
this is the preferred for most projects. Any projects led by Ariston
Lorenzo tend to follow a different coding style.

First off, as per usual, print out a copy of the GNU coding standards
and burn them.

* Tabs vs. Spaces
Tabs should be used in place of spaces when indenting code.

Quick update: Levi has *not* followed this whatsoever so if theres a
project that uses spaces instead, just use spaces.

* Indent Size
The indent size is 4 spaces. This should be a good indicator of when
you have over-engineered your code. If you need around 3-6 levels of
indentation, you miht want to consider fixing some parts of your code;
Over 6 levels and your best bet is restarting the whole thing and
writing it again.

	if (foo) {
	    bar(baz);
	}

* Bracket Placing
Brackets should be on the same line as its parent statement in *all*
places.

	if (foo == true) {

	}

	int main(argc, argv) {

	}

* Namespaces
Always indent children properties in namespaces.

	namespace APIC {
	    bool Capable();
	    void SetBase(unsigned int base);
	    unsigned int GetBase();
	    void Write(unsigned int reg, unsigned int value);
	    unsigned int Read(unsigned int reg);
	    void Enable();
	}

* Case Statements
Case statements should always be indented.

	switch (pd.size) {
	    case 0:
	        signednum = va_arg(args, int);
		break;
	    case 1:
	        signednum = va_arg(args, long);
	        break;
	    case 2:
	    	signednum = va_arg(args, long long);
		break;
	}

* Class Publics and Privates
Always indent public and private in classes.

	class Framebuffer {
	    public:
	        Framebuffer();
		Framebuffer(Address, Size, Width, Height, PPSL);
	        void* Address;
		unsigned long long Size;
		unsigned int Width, Height, PPSL;
	};

* Hash Statements
Hash statements must be indented like a children property.
	
	void Inferno(BOB* bob) {
	    #if EnableGDT == true
	        GDT::Descriptor descriptor;
		descriptor.size = sizeof(GDT) - 1;
		descriptor.offset = (unsigned long long)&GDT;
		LoadGDT(&descriptor);
	    #endif
	}

* One Liners
Always try to condense short statements to one-liners. This helps make
things cleaner. Assembly statements and function statements should
always remain on one line unless the 80 char limit was reached or
passed in which breaking of the function/assembly statement is allowed.

* Line Length
80 is the recommended maximum for line length. What do we mean by 
'recommended'? If your statement just happens to go slightly over the
line (anymore from around 81-90) is plausible considering indentation
and the fact that it's just slightly over the limit so we don't really
care. If you do go over this limit, it's a good time to check to see if
something is over-engineered. In the case of emails, commit descriptions,
etc., these should all follow the 80 line limit since it's better for
our (by default) 80 x 60 terminal windows.

* Naming Style
We use CamelCase for everything (file names, functions, etc..).
Capitalize the first letter in classes and structs. Lowercase the first
letter in a variable or function name.

	struct Data
	size_t bufferSize;
	class CHTMLDocument;
	String mimeType();
